/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');
var util = require('util');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    fcitxRemotePath_macOS: '/usr/local/bin/fcitx-remote',
    fcitxRemotePath_windows: 'C:\\Program Files\\bin\\fcitx-remote',
    fcitxRemotePath_linux: '/usr/bin/fcitx-remote',
};
const pexec = util.promisify(child_process.exec);
var IMStatus;
(function (IMStatus) {
    IMStatus[IMStatus["None"] = 0] = "None";
    IMStatus[IMStatus["Activate"] = 1] = "Activate";
    IMStatus[IMStatus["Deactivate"] = 2] = "Deactivate";
})(IMStatus || (IMStatus = {}));
class VimIMSwitchPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.imStatus = IMStatus.None;
        this.fcitxRemotePath = "";
        this.onVimModeChange = (cm) => __awaiter(this, void 0, void 0, function* () {
            if (cm.mode == "normal" || cm.mode == "visual") {
                yield this.getFcitxRemoteStatus();
                if (this.imStatus == IMStatus.Activate) {
                    yield this.deactivateIM();
                }
            }
            else if (cm.mode == "insert" || cm.mode == "replace") {
                if (this.imStatus == IMStatus.Activate) {
                    yield this.activateIM();
                }
            }
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin VimIMSwitchPlugin.');
            yield this.loadSettings();
            // this.addStatusBarItem().setText('Vim IM Swith Enabled');
            this.addSettingTab(new IMSwitchSettingTab(this.app, this));
            this.registerCodeMirror((cmEditor) => {
                // {mode: string, ?subMode: string} object. Modes: "insert", "normal", "replace", "visual". Visual sub-modes: "linewise", "blockwise"}
                cmEditor.on("vim-mode-change", this.onVimModeChange);
            });
        });
    }
    runCmd(cmd, args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield pexec(`${cmd} ${args.join(" ")}`);
            return output.stdout;
        });
    }
    getFcitxRemoteStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                console.log("VIM-IM-Switch-pugin: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            let fcitxRemoteOutput = yield this.runCmd(this.fcitxRemotePath);
            fcitxRemoteOutput = fcitxRemoteOutput.trimRight();
            if (fcitxRemoteOutput == "1") {
                this.imStatus = IMStatus.Deactivate;
            }
            else if (fcitxRemoteOutput == "2") {
                this.imStatus = IMStatus.Activate;
            }
            else {
                this.imStatus = IMStatus.None;
            }
            console.log("Vim-IM-Swith-plugin: IM status " + this.imStatus.toString());
        });
    }
    activateIM() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                console.log("VIM-IM-Switch-pugin: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            const output = yield this.runCmd(this.fcitxRemotePath, ["-o"]);
            console.log("Vim-IM-Swith-plugin: activate IM " + output);
        });
    }
    deactivateIM() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.fcitxRemotePath == "") {
                console.log("VIM-IM-Switch-pugin: cannot get fcitx-remote path, please set it correctly.");
                return;
            }
            const output = yield this.runCmd(this.fcitxRemotePath, ["-c"]);
            console.log("Vim-IM-Swith-plugin: deactivate IM " + output);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("vim-mode-change", this.onVimModeChange);
        });
        console.log('unloading plugin VimIMSwitchPlugin.');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.updateCurrentPath();
        });
    }
    updateCurrentPath() {
        return __awaiter(this, void 0, void 0, function* () {
            switch (process.platform) {
                case 'darwin':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_macOS;
                    break;
                case 'linux':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_linux;
                    break;
                case 'win32':
                    this.fcitxRemotePath = this.settings.fcitxRemotePath_windows;
                    break;
                default:
                    console.log('VIM-IM-Switch-plugin: does not support ' + process.platform + ' currently.');
                    break;
            }
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class IMSwitchSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Vim IM Switch plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for macOS')
            .setDesc('The absolute path to fcitx-remote bin file on macOS.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_macOS)
            .setValue(this.plugin.settings.fcitxRemotePath_macOS)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_macOS = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for Linux')
            .setDesc('The absolute path to fcitx-remote bin file on Linux.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_linux)
            .setValue(this.plugin.settings.fcitxRemotePath_linux)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_linux = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Fcitx Remote Path for Windows')
            .setDesc('The absolute path to fcitx-remote bin file on Windows.')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.fcitxRemotePath_windows)
            .setValue(this.plugin.settings.fcitxRemotePath_windows)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fcitxRemotePath_windows = value;
            this.plugin.updateCurrentPath();
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = VimIMSwitchPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbInByb21pc2lmeSIsImV4ZWMiLCJQbHVnaW4iLCJQbHVnaW5TZXR0aW5nVGFiIiwiU2V0dGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVB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
